
if has("gui_running")
	execute pathogen#infect()
	
	source $VIMRUNTIME/vimrc_example.vim
	source $VIMRUNTIME/mswin.vim
	
	colorscheme solarized
	map <F3> :browse e<ESC>
	"set guifont=Courier_New:h10:cANSI
	set guifont=Jetbrains_Mono:h10:cANSI
endif

behave mswin

" Commented this command. This is for recursive mapping on all modes
" map <F2> :w<CR>
nnoremap <F2> :w<CR>
inoremap <F2> <ESC>:w<CR>

" 20200712: Fix for syntax highlighting issue for large files
nmap <F5> :syntax sync fromstart<CR>
imap <F5> <ESC>:syntax sync fromstart<CR>

" 20200727: Shortcut for setting syntax to sql
nmap <S-F5> :set syntax=sql<CR>
imap <S-F5> <ESC>:set syntax=sql<CR>

" Set the window size
set columns=120
set lines=30

set tabstop=4
set shiftwidth=4

set cmdheight=2
set ignorecase
set nowrap
set nocompatible
set nobackup
set autoindent
set autochdir
set autowriteall

" Show lightline
set laststatus=2

" Search down into subfolders
set path+=**

" Display all matching files when we tab complete
set wildmenu

syntax enable
set background=dark

" Disable the creation of the undo file (*.un~)
set noundofile

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

